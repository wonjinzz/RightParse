    1 DIRECTIVE       BUILD_TREES -> ON;
    2                 LIST_STATES -> ON;
    3                 
    4 LEXICON         '%ident'  => IDENT;
    5                 '%number' => NUMBER;
    6 
    7 SYNTAX mini_c
    8 
    9 mini_c           -> translation_unit                       => PROGRAM;
   10 translation_unit -> external_dcl;
   11                  -> translation_unit external_dcl;
   12 external_dcl     -> function_def;
   13                  -> declaration;
   14 
   15 function_def     -> function_header compound_st            => FUNC_DEF;
   16 function_header  -> dcl_spec function_name formal_param    => FUNC_HEAD;
   17 dcl_spec         -> dcl_specifiers                         => DCL_SPEC;
   18 dcl_specifiers   -> dcl_specifier;
   19                  -> dcl_specifiers dcl_specifier;
   20 dcl_specifier    -> type_qualifier;
   21                  -> type_specifier;
   22 type_qualifier   -> 'const'                                => CONST_TYPE;
   23 type_specifier   -> 'int'                                  => INT_TYPE;
   24                  -> 'void'                                 => VOID_TYPE;
   25 function_name    -> '%ident';
   26 formal_param     -> '(' opt_formal_param ')'               => FORMAL_PARA;
   27 opt_formal_param -> formal_param_list;
   28                  -> ;
   29 formal_param_list-> param_dcl;
   30                  -> formal_param_list ',' param_dcl;
   31 param_dcl        -> dcl_spec declarator                    => PARAM_DCL;
   32 
   33 compound_st      -> '{' opt_dcl_list opt_stat_list '}'     => COMPOUND_ST;
   34 opt_dcl_list     -> declaration_list                       => DCL_LIST;
   35                  ->                                        => DCL_LIST;
   36 declaration_list -> declaration;
   37                  -> declaration_list declaration;
   38 declaration      -> dcl_spec init_dcl_list ';'             => DCL;
   39 init_dcl_list    -> init_declarator;
   40                  -> init_dcl_list ',' init_declarator;
   41 init_declarator  -> declarator                             => DCL_ITEM;
   42                  -> declarator '=' '%number'               => DCL_ITEM;
   43 declarator       -> '%ident'                               => SIMPLE_VAR;
   44                  -> '%ident' '[' opt_number ']'            => ARRAY_VAR;
   45 opt_number       -> '%number';
   46                  -> ;
   47                  
   48 opt_stat_list    -> statement_list                         => STAT_LIST;
   49                  -> ;
   50 statement_list   -> statement;
   51                  -> statement_list statement;
   52 statement        -> compound_st;
   53                  -> expression_st;
   54                  -> if_st;
   55                  -> while_st;
   56                  -> do_while_st;
   57                  -> switch_st;
   58                  -> labeled_st;
   59                  -> jump_st;
   60                  -> for_st;
   61                  -> return_st;
   62 
   63 expression_st    -> opt_expression ';'                     => EXP_ST;
   64 opt_expression   -> expression;
   65                  -> ;
   66 labeled_st       -> 'case' expression ':' statement        => CASE_ST;
   67                  -> 'default' ':' statement                => DEFAULT_ST;
   68 jump_st           -> 'continue' ';'                         => CONTINUE_ST;
   69                  -> 'break' ';'                            => BREAK_ST;
   70 if_st            -> 'if' '(' expression ')' statement      => IF_ST;
   71                  -> 'if' '(' expression ')' statement
   72                     'else' statement                       => IF_ELSE_ST;
   73 while_st         -> 'while' '(' expression ')' statement   => WHILE_ST;
   74 do_while_st      -> 'do' statement
   75                        'while' '(' expression ')' ';'      => DO_WHILE_ST;
   76 switch_st        -> 'switch' '(' expression ')' statement  => SWITCH_ST;
   77 for_st           -> 'for' '(' init_part ';' condition_part ';'
   78                        post_part ')' statement             => FOR_ST;
   79 init_part        -> opt_expression                         => INIT_PART;
   80 condition_part   -> opt_expression                         => CONDITION_PART;
   81 post_part        -> opt_expression                         => POST_PART;
   82 
   83 return_st        -> 'return' opt_expression ';'            => RETURN_ST;
   84 
   85 expression       -> assignment_exp;
   86 assignment_exp   -> logical_or_exp;
   87                  -> unary_exp '=' assignment_exp           => ASSIGN_OP;
   88                  -> unary_exp '+=' assignment_exp          => ADD_ASSIGN;
   89                  -> unary_exp '-=' assignment_exp          => SUB_ASSIGN;
   90                  -> unary_exp '*=' assignment_exp          => MUL_ASSIGN;
   91                  -> unary_exp '/=' assignment_exp          => DIV_ASSIGN;
   92                  -> unary_exp '%=' assignment_exp          => MOD_ASSIGN;
   93 logical_or_exp   -> logical_and_exp;
   94                  -> logical_or_exp '||' logical_and_exp    => LOGICAL_OR;
   95 logical_and_exp  -> equality_exp;
   96                  -> logical_and_exp '&&' equality_exp      => LOGICAL_AND;
   97 equality_exp     -> relational_exp;
   98                  -> equality_exp '==' relational_exp       => EQ;
   99                  -> equality_exp '!=' relational_exp       => NE;
  100 relational_exp   -> additive_exp;
  101                  -> relational_exp '>' additive_exp        => GT;
  102                  -> relational_exp '<' additive_exp        => LT;
  103                  -> relational_exp '>=' additive_exp       => GE;
  104                  -> relational_exp '<=' additive_exp       => LE;
  105 additive_exp     -> multiplicative_exp;
  106                  -> additive_exp '+' multiplicative_exp    => ADD;
  107                  -> additive_exp '-' multiplicative_exp    => SUB;
  108 multiplicative_exp -> unary_exp;
  109                    -> multiplicative_exp '*' unary_exp     => MUL;
  110                    -> multiplicative_exp '/' unary_exp     => DIV;
  111                    -> multiplicative_exp '%' unary_exp     => REMAINDER;
  112 unary_exp          -> postfix_exp;
  113                    -> '-' unary_exp                        => UNARY_MINUS;
  114                    -> '!' unary_exp                        => LOGICAL_NOT;
  115                    -> '++' unary_exp                       => PRE_INC;
  116                    -> '--' unary_exp                       => PRE_DEC;
  117 postfix_exp        -> primary_exp;
  118                    -> postfix_exp '[' expression ']'       => INDEX;
  119                    -> postfix_exp '(' opt_actual_param ')' => CALL;
  120                    -> postfix_exp '++'                     => POST_INC;
  121                    -> postfix_exp '--'                     => POST_DEC;
  122 opt_actual_param   -> actual_param;
  123                    -> ;
  124 actual_param       -> actual_param_list                    => ACTUAL_PARAM;
  125 actual_param_list  -> assignment_exp;
  126                    -> actual_param_list ',' assignment_exp;
  127 primary_exp        -> '%ident';
  128                    -> '%number';
  129                    -> '(' expression ')';                  
 VALID SOURCE


   Nonterminal:   1
        Nonterminal:   2
             Terminal:  BUILD_TREES(   2,   1,  17)
             Terminal:  ON(   2,   1,  32)
        Nonterminal:   2
             Terminal:  LIST_STATES(   2,   2,  17)
             Terminal:  ON(   2,   2,  32)
   Nonterminal:   7
        Nonterminal:   6
             Nonterminal:  12
                  Terminal:  '%ident'(   3,   4,  17)
             Nonterminal:  14
                  Terminal:  IDENT(   2,   4,  30)
        Nonterminal:   6
             Nonterminal:  12
                  Terminal:  '%number'(   3,   5,  17)
             Nonterminal:  14
                  Terminal:  NUMBER(   2,   5,  30)
   Nonterminal:   9
   Nonterminal:   4
        Terminal:  mini_c(   2,   7,   8)
        Nonterminal:   8
             Terminal:  mini_c(   2,   9,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  translation_unit(   2,   9,  21)
                  Nonterminal:  14
                       Terminal:  PROGRAM(   2,   9,  63)
        Nonterminal:   8
             Terminal:  translation_unit(   2,  10,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  external_dcl(   2,  10,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  translation_unit(   2,  11,  21)
                       Terminal:  external_dcl(   2,  11,  38)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  external_dcl(   2,  12,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  function_def(   2,  12,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declaration(   2,  13,  21)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  function_def(   2,  15,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  function_header(   2,  15,  21)
                       Terminal:  compound_st(   2,  15,  37)
                  Nonterminal:  14
                       Terminal:  FUNC_DEF(   2,  15,  63)
        Nonterminal:   8
             Terminal:  function_header(   2,  16,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_spec(   2,  16,  21)
                       Terminal:  function_name(   2,  16,  30)
                       Terminal:  formal_param(   2,  16,  44)
                  Nonterminal:  14
                       Terminal:  FUNC_HEAD(   2,  16,  63)
        Nonterminal:   8
             Terminal:  dcl_spec(   2,  17,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_specifiers(   2,  17,  21)
                  Nonterminal:  14
                       Terminal:  DCL_SPEC(   2,  17,  63)
        Nonterminal:   8
             Terminal:  dcl_specifiers(   2,  18,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_specifier(   2,  18,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_specifiers(   2,  19,  21)
                       Terminal:  dcl_specifier(   2,  19,  36)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  dcl_specifier(   2,  20,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  type_qualifier(   2,  20,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  type_specifier(   2,  21,  21)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  type_qualifier(   2,  22,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'const'(   3,  22,  21)
                  Nonterminal:  14
                       Terminal:  CONST_TYPE(   2,  22,  63)
        Nonterminal:   8
             Terminal:  type_specifier(   2,  23,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'int'(   3,  23,  21)
                  Nonterminal:  14
                       Terminal:  INT_TYPE(   2,  23,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'void'(   3,  24,  21)
                  Nonterminal:  14
                       Terminal:  VOID_TYPE(   2,  24,  63)
        Nonterminal:   8
             Terminal:  function_name(   2,  25,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%ident'(   3,  25,  21)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  formal_param(   2,  26,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '('(   3,  26,  21)
                       Terminal:  opt_formal_param(   2,  26,  25)
                       Terminal:  ')'(   3,  26,  42)
                  Nonterminal:  14
                       Terminal:  FORMAL_PARA(   2,  26,  63)
        Nonterminal:   8
             Terminal:  opt_formal_param(   2,  27,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  formal_param_list(   2,  27,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  formal_param_list(   2,  29,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  param_dcl(   2,  29,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  formal_param_list(   2,  30,  21)
                       Terminal:  ','(   3,  30,  39)
                       Terminal:  param_dcl(   2,  30,  43)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  param_dcl(   2,  31,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_spec(   2,  31,  21)
                       Terminal:  declarator(   2,  31,  30)
                  Nonterminal:  14
                       Terminal:  PARAM_DCL(   2,  31,  63)
        Nonterminal:   8
             Terminal:  compound_st(   2,  33,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '{'(   3,  33,  21)
                       Terminal:  opt_dcl_list(   2,  33,  25)
                       Terminal:  opt_stat_list(   2,  33,  38)
                       Terminal:  '}'(   3,  33,  52)
                  Nonterminal:  14
                       Terminal:  COMPOUND_ST(   2,  33,  63)
        Nonterminal:   8
             Terminal:  opt_dcl_list(   2,  34,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declaration_list(   2,  34,  21)
                  Nonterminal:  14
                       Terminal:  DCL_LIST(   2,  34,  63)
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
                       Terminal:  DCL_LIST(   2,  35,  63)
        Nonterminal:   8
             Terminal:  declaration_list(   2,  36,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declaration(   2,  36,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declaration_list(   2,  37,  21)
                       Terminal:  declaration(   2,  37,  38)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  declaration(   2,  38,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  dcl_spec(   2,  38,  21)
                       Terminal:  init_dcl_list(   2,  38,  30)
                       Terminal:  ';'(   3,  38,  44)
                  Nonterminal:  14
                       Terminal:  DCL(   2,  38,  63)
        Nonterminal:   8
             Terminal:  init_dcl_list(   2,  39,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  init_declarator(   2,  39,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  init_dcl_list(   2,  40,  21)
                       Terminal:  ','(   3,  40,  35)
                       Terminal:  init_declarator(   2,  40,  39)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  init_declarator(   2,  41,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declarator(   2,  41,  21)
                  Nonterminal:  14
                       Terminal:  DCL_ITEM(   2,  41,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  declarator(   2,  42,  21)
                       Terminal:  '='(   3,  42,  32)
                       Terminal:  '%number'(   3,  42,  36)
                  Nonterminal:  14
                       Terminal:  DCL_ITEM(   2,  42,  63)
        Nonterminal:   8
             Terminal:  declarator(   2,  43,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%ident'(   3,  43,  21)
                  Nonterminal:  14
                       Terminal:  SIMPLE_VAR(   2,  43,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%ident'(   3,  44,  21)
                       Terminal:  '['(   3,  44,  30)
                       Terminal:  opt_number(   2,  44,  34)
                       Terminal:  ']'(   3,  44,  45)
                  Nonterminal:  14
                       Terminal:  ARRAY_VAR(   2,  44,  63)
        Nonterminal:   8
             Terminal:  opt_number(   2,  45,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%number'(   3,  45,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  opt_stat_list(   2,  48,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  statement_list(   2,  48,  21)
                  Nonterminal:  14
                       Terminal:  STAT_LIST(   2,  48,  63)
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  statement_list(   2,  50,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  statement(   2,  50,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  statement_list(   2,  51,  21)
                       Terminal:  statement(   2,  51,  36)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  statement(   2,  52,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  compound_st(   2,  52,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  expression_st(   2,  53,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  if_st(   2,  54,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  while_st(   2,  55,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  do_while_st(   2,  56,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  switch_st(   2,  57,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  labeled_st(   2,  58,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  jump_st(   2,  59,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  for_st(   2,  60,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  return_st(   2,  61,  21)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  expression_st(   2,  63,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  opt_expression(   2,  63,  21)
                       Terminal:  ';'(   3,  63,  36)
                  Nonterminal:  14
                       Terminal:  EXP_ST(   2,  63,  63)
        Nonterminal:   8
             Terminal:  opt_expression(   2,  64,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  expression(   2,  64,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  labeled_st(   2,  66,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'case'(   3,  66,  21)
                       Terminal:  expression(   2,  66,  28)
                       Terminal:  ':'(   3,  66,  39)
                       Terminal:  statement(   2,  66,  43)
                  Nonterminal:  14
                       Terminal:  CASE_ST(   2,  66,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'default'(   3,  67,  21)
                       Terminal:  ':'(   3,  67,  31)
                       Terminal:  statement(   2,  67,  35)
                  Nonterminal:  14
                       Terminal:  DEFAULT_ST(   2,  67,  63)
        Nonterminal:   8
             Terminal:  jump_st(   2,  68,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'continue'(   3,  68,  22)
                       Terminal:  ';'(   3,  68,  33)
                  Nonterminal:  14
                       Terminal:  CONTINUE_ST(   2,  68,  64)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'break'(   3,  69,  21)
                       Terminal:  ';'(   3,  69,  29)
                  Nonterminal:  14
                       Terminal:  BREAK_ST(   2,  69,  63)
        Nonterminal:   8
             Terminal:  if_st(   2,  70,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'if'(   3,  70,  21)
                       Terminal:  '('(   3,  70,  26)
                       Terminal:  expression(   2,  70,  30)
                       Terminal:  ')'(   3,  70,  41)
                       Terminal:  statement(   2,  70,  45)
                  Nonterminal:  14
                       Terminal:  IF_ST(   2,  70,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'if'(   3,  71,  21)
                       Terminal:  '('(   3,  71,  26)
                       Terminal:  expression(   2,  71,  30)
                       Terminal:  ')'(   3,  71,  41)
                       Terminal:  statement(   2,  71,  45)
                       Terminal:  'else'(   3,  72,  21)
                       Terminal:  statement(   2,  72,  28)
                  Nonterminal:  14
                       Terminal:  IF_ELSE_ST(   2,  72,  63)
        Nonterminal:   8
             Terminal:  while_st(   2,  73,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'while'(   3,  73,  21)
                       Terminal:  '('(   3,  73,  29)
                       Terminal:  expression(   2,  73,  33)
                       Terminal:  ')'(   3,  73,  44)
                       Terminal:  statement(   2,  73,  48)
                  Nonterminal:  14
                       Terminal:  WHILE_ST(   2,  73,  63)
        Nonterminal:   8
             Terminal:  do_while_st(   2,  74,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'do'(   3,  74,  21)
                       Terminal:  statement(   2,  74,  26)
                       Terminal:  'while'(   3,  75,  24)
                       Terminal:  '('(   3,  75,  32)
                       Terminal:  expression(   2,  75,  36)
                       Terminal:  ')'(   3,  75,  47)
                       Terminal:  ';'(   3,  75,  51)
                  Nonterminal:  14
                       Terminal:  DO_WHILE_ST(   2,  75,  63)
        Nonterminal:   8
             Terminal:  switch_st(   2,  76,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'switch'(   3,  76,  21)
                       Terminal:  '('(   3,  76,  30)
                       Terminal:  expression(   2,  76,  34)
                       Terminal:  ')'(   3,  76,  45)
                       Terminal:  statement(   2,  76,  49)
                  Nonterminal:  14
                       Terminal:  SWITCH_ST(   2,  76,  63)
        Nonterminal:   8
             Terminal:  for_st(   2,  77,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'for'(   3,  77,  21)
                       Terminal:  '('(   3,  77,  27)
                       Terminal:  init_part(   2,  77,  31)
                       Terminal:  ';'(   3,  77,  41)
                       Terminal:  condition_part(   2,  77,  45)
                       Terminal:  ';'(   3,  77,  60)
                       Terminal:  post_part(   2,  78,  24)
                       Terminal:  ')'(   3,  78,  34)
                       Terminal:  statement(   2,  78,  38)
                  Nonterminal:  14
                       Terminal:  FOR_ST(   2,  78,  63)
        Nonterminal:   8
             Terminal:  init_part(   2,  79,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  opt_expression(   2,  79,  21)
                  Nonterminal:  14
                       Terminal:  INIT_PART(   2,  79,  63)
        Nonterminal:   8
             Terminal:  condition_part(   2,  80,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  opt_expression(   2,  80,  21)
                  Nonterminal:  14
                       Terminal:  CONDITION_PART(   2,  80,  63)
        Nonterminal:   8
             Terminal:  post_part(   2,  81,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  opt_expression(   2,  81,  21)
                  Nonterminal:  14
                       Terminal:  POST_PART(   2,  81,  63)
        Nonterminal:   8
             Terminal:  return_st(   2,  83,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  'return'(   3,  83,  21)
                       Terminal:  opt_expression(   2,  83,  30)
                       Terminal:  ';'(   3,  83,  45)
                  Nonterminal:  14
                       Terminal:  RETURN_ST(   2,  83,  63)
        Nonterminal:   8
             Terminal:  expression(   2,  85,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  assignment_exp(   2,  85,  21)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  assignment_exp(   2,  86,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  logical_or_exp(   2,  86,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  87,  21)
                       Terminal:  '='(   3,  87,  31)
                       Terminal:  assignment_exp(   2,  87,  35)
                  Nonterminal:  14
                       Terminal:  ASSIGN_OP(   2,  87,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  88,  21)
                       Terminal:  '+='(   3,  88,  31)
                       Terminal:  assignment_exp(   2,  88,  36)
                  Nonterminal:  14
                       Terminal:  ADD_ASSIGN(   2,  88,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  89,  21)
                       Terminal:  '-='(   3,  89,  31)
                       Terminal:  assignment_exp(   2,  89,  36)
                  Nonterminal:  14
                       Terminal:  SUB_ASSIGN(   2,  89,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  90,  21)
                       Terminal:  '*='(   3,  90,  31)
                       Terminal:  assignment_exp(   2,  90,  36)
                  Nonterminal:  14
                       Terminal:  MUL_ASSIGN(   2,  90,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  91,  21)
                       Terminal:  '/='(   3,  91,  31)
                       Terminal:  assignment_exp(   2,  91,  36)
                  Nonterminal:  14
                       Terminal:  DIV_ASSIGN(   2,  91,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2,  92,  21)
                       Terminal:  '%='(   3,  92,  31)
                       Terminal:  assignment_exp(   2,  92,  36)
                  Nonterminal:  14
                       Terminal:  MOD_ASSIGN(   2,  92,  63)
        Nonterminal:   8
             Terminal:  logical_or_exp(   2,  93,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  logical_and_exp(   2,  93,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  logical_or_exp(   2,  94,  21)
                       Terminal:  '||'(   3,  94,  36)
                       Terminal:  logical_and_exp(   2,  94,  41)
                  Nonterminal:  14
                       Terminal:  LOGICAL_OR(   2,  94,  63)
        Nonterminal:   8
             Terminal:  logical_and_exp(   2,  95,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  equality_exp(   2,  95,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  logical_and_exp(   2,  96,  21)
                       Terminal:  '&&'(   3,  96,  37)
                       Terminal:  equality_exp(   2,  96,  42)
                  Nonterminal:  14
                       Terminal:  LOGICAL_AND(   2,  96,  63)
        Nonterminal:   8
             Terminal:  equality_exp(   2,  97,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  relational_exp(   2,  97,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  equality_exp(   2,  98,  21)
                       Terminal:  '=='(   3,  98,  34)
                       Terminal:  relational_exp(   2,  98,  39)
                  Nonterminal:  14
                       Terminal:  EQ(   2,  98,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  equality_exp(   2,  99,  21)
                       Terminal:  '!='(   3,  99,  34)
                       Terminal:  relational_exp(   2,  99,  39)
                  Nonterminal:  14
                       Terminal:  NE(   2,  99,  63)
        Nonterminal:   8
             Terminal:  relational_exp(   2, 100,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  additive_exp(   2, 100,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  relational_exp(   2, 101,  21)
                       Terminal:  '>'(   3, 101,  36)
                       Terminal:  additive_exp(   2, 101,  40)
                  Nonterminal:  14
                       Terminal:  GT(   2, 101,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  relational_exp(   2, 102,  21)
                       Terminal:  '<'(   3, 102,  36)
                       Terminal:  additive_exp(   2, 102,  40)
                  Nonterminal:  14
                       Terminal:  LT(   2, 102,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  relational_exp(   2, 103,  21)
                       Terminal:  '>='(   3, 103,  36)
                       Terminal:  additive_exp(   2, 103,  41)
                  Nonterminal:  14
                       Terminal:  GE(   2, 103,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  relational_exp(   2, 104,  21)
                       Terminal:  '<='(   3, 104,  36)
                       Terminal:  additive_exp(   2, 104,  41)
                  Nonterminal:  14
                       Terminal:  LE(   2, 104,  63)
        Nonterminal:   8
             Terminal:  additive_exp(   2, 105,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  multiplicative_exp(   2, 105,  21)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  additive_exp(   2, 106,  21)
                       Terminal:  '+'(   3, 106,  34)
                       Terminal:  multiplicative_exp(   2, 106,  38)
                  Nonterminal:  14
                       Terminal:  ADD(   2, 106,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  additive_exp(   2, 107,  21)
                       Terminal:  '-'(   3, 107,  34)
                       Terminal:  multiplicative_exp(   2, 107,  38)
                  Nonterminal:  14
                       Terminal:  SUB(   2, 107,  63)
        Nonterminal:   8
             Terminal:  multiplicative_exp(   2, 108,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  unary_exp(   2, 108,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  multiplicative_exp(   2, 109,  23)
                       Terminal:  '*'(   3, 109,  42)
                       Terminal:  unary_exp(   2, 109,  46)
                  Nonterminal:  14
                       Terminal:  MUL(   2, 109,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  multiplicative_exp(   2, 110,  23)
                       Terminal:  '/'(   3, 110,  42)
                       Terminal:  unary_exp(   2, 110,  46)
                  Nonterminal:  14
                       Terminal:  DIV(   2, 110,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  multiplicative_exp(   2, 111,  23)
                       Terminal:  '%'(   3, 111,  42)
                       Terminal:  unary_exp(   2, 111,  46)
                  Nonterminal:  14
                       Terminal:  REMAINDER(   2, 111,  63)
        Nonterminal:   8
             Terminal:  unary_exp(   2, 112,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  postfix_exp(   2, 112,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '-'(   3, 113,  23)
                       Terminal:  unary_exp(   2, 113,  27)
                  Nonterminal:  14
                       Terminal:  UNARY_MINUS(   2, 113,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '!'(   3, 114,  23)
                       Terminal:  unary_exp(   2, 114,  27)
                  Nonterminal:  14
                       Terminal:  LOGICAL_NOT(   2, 114,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '++'(   3, 115,  23)
                       Terminal:  unary_exp(   2, 115,  28)
                  Nonterminal:  14
                       Terminal:  PRE_INC(   2, 115,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '--'(   3, 116,  23)
                       Terminal:  unary_exp(   2, 116,  28)
                  Nonterminal:  14
                       Terminal:  PRE_DEC(   2, 116,  63)
        Nonterminal:   8
             Terminal:  postfix_exp(   2, 117,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  primary_exp(   2, 117,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  postfix_exp(   2, 118,  23)
                       Terminal:  '['(   3, 118,  35)
                       Terminal:  expression(   2, 118,  39)
                       Terminal:  ']'(   3, 118,  50)
                  Nonterminal:  14
                       Terminal:  INDEX(   2, 118,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  postfix_exp(   2, 119,  23)
                       Terminal:  '('(   3, 119,  35)
                       Terminal:  opt_actual_param(   2, 119,  39)
                       Terminal:  ')'(   3, 119,  56)
                  Nonterminal:  14
                       Terminal:  CALL(   2, 119,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  postfix_exp(   2, 120,  23)
                       Terminal:  '++'(   3, 120,  35)
                  Nonterminal:  14
                       Terminal:  POST_INC(   2, 120,  63)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  postfix_exp(   2, 121,  23)
                       Terminal:  '--'(   3, 121,  35)
                  Nonterminal:  14
                       Terminal:  POST_DEC(   2, 121,  63)
        Nonterminal:   8
             Terminal:  opt_actual_param(   2, 122,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  actual_param(   2, 122,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  actual_param(   2, 124,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  actual_param_list(   2, 124,  23)
                  Nonterminal:  14
                       Terminal:  ACTUAL_PARAM(   2, 124,  63)
        Nonterminal:   8
             Terminal:  actual_param_list(   2, 125,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  assignment_exp(   2, 125,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  actual_param_list(   2, 126,  23)
                       Terminal:  ','(   3, 126,  41)
                       Terminal:  assignment_exp(   2, 126,  45)
                  Nonterminal:  14
        Nonterminal:   8
             Terminal:  primary_exp(   2, 127,   1)
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%ident'(   3, 127,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '%number'(   3, 128,  23)
                  Nonterminal:  14
             Nonterminal:  10
                  Nonterminal:  11
                       Terminal:  '('(   3, 129,  23)
                       Terminal:  expression(   2, 129,  27)
                       Terminal:  ')'(   3, 129,  38)
                  Nonterminal:  14

 ******** TERMINAL    SYMBOL ********

 '!'          '!='         '%'          '%='         '%ident'     '%number'   
 '&&'         '('          ')'          '*'          '*='         '+'         
 '++'         '+='         ','          '-'          '--'         '-='        
 '/'          '/='         ':'          ';'          '<'          '<='        
 '='          '=='         '>'          '>='         '['          ']'         
 '_|_'        'break'      'case'       'const'      'continue'   'default'   
 'do'         'else'       'for'        'if'         'int'        'return'    
 'switch'     'void'       'while'      '{'          '||'         '}'         

 ******** NONTERMINAL SYMBOL ********

 actual_param       actual_param_list  additive_exp       assignment_exp    
 compound_st        condition_part     dcl_spec           dcl_specifier     
 dcl_specifiers     declaration        declaration_list   declarator        
 do_while_st        equality_exp       expression         expression_st     
 external_dcl       for_st             formal_param       formal_param_list 
 function_def       function_header    function_name      if_st             
 init_dcl_list      init_declarator    init_part          jump_st           
 labeled_st         logical_and_exp    logical_or_exp     mini_c            
 mini_c$            multiplicative_exp opt_actual_param   opt_dcl_list      
 opt_expression     opt_formal_param   opt_number         opt_stat_list     
 param_dcl          post_part          postfix_exp        primary_exp       
 relational_exp     return_st          statement          statement_list    
 switch_st          translation_unit   type_qualifier     type_specifier    
 unary_exp          while_st          

 ******** Node        Values ********
 enum nodeName = {
  ACTUAL_PARAM,  ADD,  ADD_ASSIGN,  ARRAY_VAR,  ASSIGN_OP,  BREAK_ST,  CALL,
   CASE_ST,  COMPOUND_ST,  CONDITION_PART,  CONST_TYPE,  CONTINUE_ST,  DCL,
   DCL_ITEM,  DCL_LIST,  DCL_SPEC,  DEFAULT_ST,  DIV,  DIV_ASSIGN,  DO_WHILE_ST,
   EQ,  ERROR,  EXP_ST,  FORMAL_PARA,  FOR_ST,  FUNC_DEF,  FUNC_HEAD,  GE,  GT,  IDENT,
   IF_ELSE_ST,  IF_ST,  INDEX,  INIT_PART,  INT_TYPE,  LE,  LOGICAL_AND,
   LOGICAL_NOT,  LOGICAL_OR,  LT,  MOD_ASSIGN,  MUL,  MUL_ASSIGN,  NE,  NUMBER,
   PARAM_DCL,  POST_DEC,  POST_INC,  POST_PART,  PRE_DEC,  PRE_INC,  PROGRAM,
   REMAINDER,  RETURN_ST,  SIMPLE_VAR,  STAT_LIST,  SUB,  SUB_ASSIGN,  SWITCH_ST,
   UNARY_MINUS,  VOID_TYPE,  WHILE_ST};


 **************************************
 *      Pretty     Print              *
 **************************************

 DIRECTIVE 
   BUILD_TREES             ->  ON;
   LIST_STATES ->  ON;
 LEXICON
   '%ident'                                                     =>  IDENT;
   '%number'                                                    =>  NUMBER;
 SYNTAX  mini_c
 mini_c                                        -- RULE NUMBER:  1
  ->  translation_unit                                            =>  PROGRAM;
 translation_unit                              -- RULE NUMBER:  2
  ->  external_dcl ;
  ->  translation_unit  external_dcl ;
 external_dcl                                  -- RULE NUMBER:  4
  ->  function_def ;
  ->  declaration ;
 function_def                                  -- RULE NUMBER:  6
  ->  function_header  compound_st                                =>  FUNC_DEF;
 function_header                               -- RULE NUMBER:  7
  ->  dcl_spec  function_name  formal_param                       =>  FUNC_HEAD;
 dcl_spec                                      -- RULE NUMBER:  8
  ->  dcl_specifiers                                              =>  DCL_SPEC;
 dcl_specifiers                                -- RULE NUMBER:  9
  ->  dcl_specifier ;
  ->  dcl_specifiers  dcl_specifier ;
 dcl_specifier                                 -- RULE NUMBER: 11
  ->  type_qualifier ;
  ->  type_specifier ;
 type_qualifier                                -- RULE NUMBER: 13
  ->  'const'                                                     =>  CONST_TYPE;
 type_specifier                                -- RULE NUMBER: 14
  ->  'int'                                                       =>  INT_TYPE;
  ->  'void'                                                      =>  VOID_TYPE;
 function_name                                 -- RULE NUMBER: 16
  ->  '%ident' ;
 formal_param                                  -- RULE NUMBER: 17
  ->  '('  opt_formal_param  ')'                                  =>  FORMAL_PARA;
 opt_formal_param                              -- RULE NUMBER: 18
  ->  formal_param_list ;
  -> ;
 formal_param_list                             -- RULE NUMBER: 20
  ->  param_dcl ;
  ->  formal_param_list  ','  param_dcl ;
 param_dcl                                     -- RULE NUMBER: 22
  ->  dcl_spec  declarator                                        =>  PARAM_DCL;
 compound_st                                   -- RULE NUMBER: 23
  ->  '{'  opt_dcl_list  opt_stat_list  '}'                       =>  COMPOUND_ST;
 opt_dcl_list                                  -- RULE NUMBER: 24
  ->  declaration_list                                            =>  DCL_LIST;
  ->                                                              =>  DCL_LIST;
 declaration_list                              -- RULE NUMBER: 26
  ->  declaration ;
  ->  declaration_list  declaration ;
 declaration                                   -- RULE NUMBER: 28
  ->  dcl_spec  init_dcl_list  ';'                                =>  DCL;
 init_dcl_list                                 -- RULE NUMBER: 29
  ->  init_declarator ;
  ->  init_dcl_list  ','  init_declarator ;
 init_declarator                               -- RULE NUMBER: 31
  ->  declarator                                                  =>  DCL_ITEM;
  ->  declarator  '='  '%number'                                  =>  DCL_ITEM;
 declarator                                    -- RULE NUMBER: 33
  ->  '%ident'                                                    =>  SIMPLE_VAR;
  ->  '%ident'  '['  opt_number  ']'                              =>  ARRAY_VAR;
 opt_number                                    -- RULE NUMBER: 35
  ->  '%number' ;
  -> ;
 opt_stat_list                                 -- RULE NUMBER: 37
  ->  statement_list                                              =>  STAT_LIST;
  -> ;
 statement_list                                -- RULE NUMBER: 39
  ->  statement ;
  ->  statement_list  statement ;
 statement                                     -- RULE NUMBER: 41
  ->  compound_st ;
  ->  expression_st ;
  ->  if_st ;
  ->  while_st ;
  ->  do_while_st ;
  ->  switch_st ;
  ->  labeled_st ;
  ->  jump_st ;
  ->  for_st ;
  ->  return_st ;
 expression_st                                 -- RULE NUMBER: 51
  ->  opt_expression  ';'                                         =>  EXP_ST;
 opt_expression                                -- RULE NUMBER: 52
  ->  expression ;
  -> ;
 labeled_st                                    -- RULE NUMBER: 54
  ->  'case'  expression  ':'  statement                          =>  CASE_ST;
  ->  'default'  ':'  statement                                   =>  DEFAULT_ST;
 jump_st                                       -- RULE NUMBER: 56
  ->  'continue'  ';'                                             =>  CONTINUE_ST;
  ->  'break'  ';'                                                =>  BREAK_ST;
 if_st                                         -- RULE NUMBER: 58
  ->  'if'  '('  expression  ')'  statement                       =>  IF_ST;
  ->  'if'  '('  expression  ')'  statement  'else'  statement    =>  IF_ELSE_ST;
 while_st                                      -- RULE NUMBER: 60
  ->  'while'  '('  expression  ')'  statement                    =>  WHILE_ST;
 do_while_st                                   -- RULE NUMBER: 61
  ->  'do'  statement  'while'  '('  expression  ')'  ';'         =>  DO_WHILE_ST;
 switch_st                                     -- RULE NUMBER: 62
  ->  'switch'  '('  expression  ')'  statement                   =>  SWITCH_ST;
 for_st                                        -- RULE NUMBER: 63
  ->  'for'  '('  init_part  ';'  condition_part  ';'  post_part 
      ')'  statement                                             =>  FOR_ST;
 init_part                                     -- RULE NUMBER: 64
  ->  opt_expression                                              =>  INIT_PART;
 condition_part                                -- RULE NUMBER: 65
  ->  opt_expression                                              =>  CONDITION_PART;
 post_part                                     -- RULE NUMBER: 66
  ->  opt_expression                                              =>  POST_PART;
 return_st                                     -- RULE NUMBER: 67
  ->  'return'  opt_expression  ';'                               =>  RETURN_ST;
 expression                                    -- RULE NUMBER: 68
  ->  assignment_exp ;
 assignment_exp                                -- RULE NUMBER: 69
  ->  logical_or_exp ;
  ->  unary_exp  '='  assignment_exp                              =>  ASSIGN_OP;
  ->  unary_exp  '+='  assignment_exp                             =>  ADD_ASSIGN;
  ->  unary_exp  '-='  assignment_exp                             =>  SUB_ASSIGN;
  ->  unary_exp  '*='  assignment_exp                             =>  MUL_ASSIGN;
  ->  unary_exp  '/='  assignment_exp                             =>  DIV_ASSIGN;
  ->  unary_exp  '%='  assignment_exp                             =>  MOD_ASSIGN;
 logical_or_exp                                -- RULE NUMBER: 76
  ->  logical_and_exp ;
  ->  logical_or_exp  '||'  logical_and_exp                       =>  LOGICAL_OR;
 logical_and_exp                               -- RULE NUMBER: 78
  ->  equality_exp ;
  ->  logical_and_exp  '&&'  equality_exp                         =>  LOGICAL_AND;
 equality_exp                                  -- RULE NUMBER: 80
  ->  relational_exp ;
  ->  equality_exp  '=='  relational_exp                          =>  EQ;
  ->  equality_exp  '!='  relational_exp                          =>  NE;
 relational_exp                                -- RULE NUMBER: 83
  ->  additive_exp ;
  ->  relational_exp  '>'  additive_exp                           =>  GT;
  ->  relational_exp  '<'  additive_exp                           =>  LT;
  ->  relational_exp  '>='  additive_exp                          =>  GE;
  ->  relational_exp  '<='  additive_exp                          =>  LE;
 additive_exp                                  -- RULE NUMBER: 88
  ->  multiplicative_exp ;
  ->  additive_exp  '+'  multiplicative_exp                       =>  ADD;
  ->  additive_exp  '-'  multiplicative_exp                       =>  SUB;
 multiplicative_exp                            -- RULE NUMBER: 91
  ->  unary_exp ;
  ->  multiplicative_exp  '*'  unary_exp                          =>  MUL;
  ->  multiplicative_exp  '/'  unary_exp                          =>  DIV;
  ->  multiplicative_exp  '%'  unary_exp                          =>  REMAINDER;
 unary_exp                                     -- RULE NUMBER: 95
  ->  postfix_exp ;
  ->  '-'  unary_exp                                              =>  UNARY_MINUS;
  ->  '!'  unary_exp                                              =>  LOGICAL_NOT;
  ->  '++'  unary_exp                                             =>  PRE_INC;
  ->  '--'  unary_exp                                             =>  PRE_DEC;
 postfix_exp                                   -- RULE NUMBER: 100
  ->  primary_exp ;
  ->  postfix_exp  '['  expression  ']'                           =>  INDEX;
  ->  postfix_exp  '('  opt_actual_param  ')'                     =>  CALL;
  ->  postfix_exp  '++'                                           =>  POST_INC;
  ->  postfix_exp  '--'                                           =>  POST_DEC;
 opt_actual_param                              -- RULE NUMBER: 105
  ->  actual_param ;
  -> ;
 actual_param                                  -- RULE NUMBER: 107
  ->  actual_param_list                                           =>  ACTUAL_PARAM;
 actual_param_list                             -- RULE NUMBER: 108
  ->  assignment_exp ;
  ->  actual_param_list  ','  assignment_exp ;
 primary_exp                                   -- RULE NUMBER: 110
  ->  '%ident' ;
  ->  '%number' ;
  ->  '('  expression  ')' ;

 **************************************
 *       CROSS      REFERENCE         *
 **************************************

 '!'                  97 
 '!='                 82 
 '%'                  94 
 '%='                 75 
 '%ident'            110   16   34   33 
 '%number'           111   35   32 
 '&&'                 79 
 '('                  60   62  112  102   59   58   17   63   61 
 ')'                  60   62  112  102   59   58   17   63   61 
 '*'                  92 
 '*='                 73 
 '+'                  89 
 '++'                 98  103 
 '+='                 71 
 ','                  30   21  109 
 '-'                  96   90 
 '--'                 99  104 
 '-='                 72 
 '/'                  93 
 '/='                 74 
 ':'                  55   54 
 ';'                  67   57   56   63   63   51   61   28 
 '<'                  85 
 '<='                 87 
 '='                  32   70 
 '=='                 81 
 '>'                  84 
 '>='                 86 
 '['                 101   34 
 ']'                 101   34 
 '_|_'                 0 
 'break'              57 
 'case'               54 
 'const'              13 
 'continue'           56 
 'default'            55 
 'do'                 61 
 'else'               59 
 'for'                63 
 'if'                 59   58 
 'int'                14 
 'return'             67 
 'switch'             62 
 'void'               15 
 'while'              60   61 
 '{'                  23 
 '||'                 77 
 '}'                  23 
 actual_param        105  107*
 actual_param_list   109  109* 108* 107 
 additive_exp         87   86   85   84   83   90   90*  89   89*
                      88*
 assignment_exp       68   75   75*  74   74*  73   73*  72   72*
                      71   71*  70   70*  69* 109  108 
 compound_st          41    6   23*
 condition_part       63   65*
 dcl_spec             22    7   28    8*
 dcl_specifier        10    9   12*  11*
 dcl_specifiers       10   10*   9*   8 
 declaration           5   27   26   28*
 declaration_list     24   27   27*  26*
 declarator           22   32   31   34*  33*
 do_while_st          45   61*
 equality_exp         79   78   82   82*  81   81*  80*
 expression           60   62  112  101   52   54   59   58   68*  61 
                    
 expression_st        42   51*
 external_dcl          3    2    5*   4*
 for_st               49   63*
 formal_param          7   17*
 formal_param_list    18   21   21*  20*
 function_def          6*   4 
 function_header       7*   6 
 function_name        16*   7 
 if_st                43   59*  58*
 init_dcl_list        30   30*  29*  28 
 init_declarator      32*  31*  30   29 
 init_part            64*  63 
 jump_st              48   57*  56*
 labeled_st           47   55*  54*
 logical_and_exp      77   76   79   79*  78*
 logical_or_exp       77   77*  76*  69 
 mini_c                0    1*
 mini_c$               0 
 multiplicative_exp   94   94*  93   93*  92   92*  91*  90 
                      89   88 
 opt_actual_param    102  106* 105*
 opt_dcl_list         25*  24*  23 
 opt_expression       67   66   53*  52*  64   51   65 
 opt_formal_param     19*  18*  17 
 opt_number           36*  35*  34 
 opt_stat_list        38*  37*  23 
 param_dcl            22*  21   20 
 post_part            66*  63 
 postfix_exp          95  104  104* 103  103* 102  102* 101  101*
                     100*
 primary_exp         112* 111* 110* 100 
 relational_exp       87   87*  86   86*  85   85*  84   84*  83*
                      82   81   80 
 return_st            50   67*
 statement            60   62   40   39   50*  49*  48*  47*  46*  45*
                      44*  43*  42*  41*  55   54   59   59   58   63   61 
 statement_list       40   40*  39*  37 
 switch_st            62*  46 
 translation_unit      3    3*   2*   1 
 type_qualifier       13*  11 
 type_specifier       15*  14*  12 
 unary_exp            99   99*  98   98*  97   97*  96   96*  95*  94 
                      93   92   91   75   74   73   72   71   70 
 while_st             60*  44 

 **************************************
 *            STATISTICS              *
 **************************************

 --------- STRING TABLE ---------
  String Table Space  : 1467
  Number Of    Entrys :  173
  Average Entry Length:    8
  Buckets Used        :  102

 ------ SYMBOL INFORMATION ------
  Terminal     Count  :   47
  Nonterminal  Count  :   55
  Tree Node    Count  :   62
  Synonym      Count  :    0

 ------ RULE   INFORMATION ------
  Number  Of   Rules  :  113
  Average Rule Length :    3

 **************************************
 *        C0 and lookahead info       *
 **************************************

 Number OF Kernels : 193
 *** KERNEL :   0

 mini_c$ ->  .  mini_c '_|_'
 mini_c ->  .  translation_unit
 translation_unit ->  .  external_dcl
 translation_unit ->  .  translation_unit external_dcl
 external_dcl ->  .  function_def
 external_dcl ->  .  declaration
 function_def ->  .  function_header compound_st
 declaration ->  .  dcl_spec init_dcl_list ';'
 function_header ->  .  dcl_spec function_name formal_param
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  11  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT   8  declaration
 SHIFT   7  external_dcl
 SHIFT   6  function_def
 SHIFT   5  function_header
 SHIFT   4  mini_c
 SHIFT   3  translation_unit
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :   1
 ACCESS SYMBOL :  type_specifier
 dcl_specifier ->  type_specifier . 

 REDUCE  12  'void' 'int' 'const' '%ident'

 *** KERNEL :   2
 ACCESS SYMBOL :  type_qualifier
 dcl_specifier ->  type_qualifier . 

 REDUCE  11  'void' 'int' 'const' '%ident'

 *** KERNEL :   3
 ACCESS SYMBOL :  translation_unit
 mini_c ->  translation_unit . 
 translation_unit ->  translation_unit .  external_dcl
 external_dcl ->  .  function_def
 external_dcl ->  .  declaration
 function_def ->  .  function_header compound_st
 declaration ->  .  dcl_spec init_dcl_list ';'
 function_header ->  .  dcl_spec function_name formal_param
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 REDUCE   1  '_|_'
 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  11  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT   8  declaration
 SHIFT  15  external_dcl
 SHIFT   6  function_def
 SHIFT   5  function_header
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :   4
 ACCESS SYMBOL :  mini_c
 mini_c$ ->  mini_c .  '_|_'

 SHIFT  16  '_|_'

 *** KERNEL :   5
 ACCESS SYMBOL :  function_header
 function_def ->  function_header .  compound_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'

 SHIFT  18  '{'
 SHIFT  17  compound_st

 *** KERNEL :   6
 ACCESS SYMBOL :  function_def
 external_dcl ->  function_def . 

 REDUCE   4  'void' 'int' 'const' '_|_'

 *** KERNEL :   7
 ACCESS SYMBOL :  external_dcl
 translation_unit ->  external_dcl . 

 REDUCE   2  'void' 'int' 'const' '_|_'

 *** KERNEL :   8
 ACCESS SYMBOL :  declaration
 external_dcl ->  declaration . 

 REDUCE   5  'void' 'int' 'const' '_|_'

 *** KERNEL :   9
 ACCESS SYMBOL :  dcl_specifiers
 dcl_spec ->  dcl_specifiers . 
 dcl_specifiers ->  dcl_specifiers .  dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 REDUCE   8  '%ident'
 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  19  dcl_specifier
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :  10
 ACCESS SYMBOL :  dcl_specifier
 dcl_specifiers ->  dcl_specifier . 

 REDUCE   9  'void' 'int' 'const' '%ident'

 *** KERNEL :  11
 ACCESS SYMBOL :  dcl_spec
 declaration ->  dcl_spec .  init_dcl_list ';'
 function_header ->  dcl_spec .  function_name formal_param
 init_dcl_list ->  .  init_declarator
 init_dcl_list ->  .  init_dcl_list ',' init_declarator
 function_name ->  .  '%ident'
 init_declarator ->  .  declarator
 init_declarator ->  .  declarator '=' '%number'
 declarator ->  .  '%ident'
 declarator ->  .  '%ident' '[' opt_number ']'

 SHIFT  24  '%ident'
 SHIFT  23  declarator
 SHIFT  22  function_name
 SHIFT  21  init_dcl_list
 SHIFT  20  init_declarator

 *** KERNEL :  12
 ACCESS SYMBOL :  'void'
 type_specifier ->  'void' . 

 REDUCE  15  'void' 'int' 'const' '%ident'

 *** KERNEL :  13
 ACCESS SYMBOL :  'int'
 type_specifier ->  'int' . 

 REDUCE  14  'void' 'int' 'const' '%ident'

 *** KERNEL :  14
 ACCESS SYMBOL :  'const'
 type_qualifier ->  'const' . 

 REDUCE  13  'void' 'int' 'const' '%ident'

 *** KERNEL :  15
 ACCESS SYMBOL :  external_dcl
 translation_unit ->  translation_unit external_dcl . 

 REDUCE   3  'void' 'int' 'const' '_|_'

 *** KERNEL :  16
 ACCESS SYMBOL :  '_|_'
 mini_c$ ->  mini_c '_|_' . 

 ACCEPT 

 *** KERNEL :  17
 ACCESS SYMBOL :  compound_st
 function_def ->  function_header compound_st . 

 REDUCE   6  'void' 'int' 'const' '_|_'

 *** KERNEL :  18
 ACCESS SYMBOL :  '{'
 compound_st ->  '{' .  opt_dcl_list opt_stat_list '}'
 opt_dcl_list ->  .  declaration_list
 opt_dcl_list ->  . 
 declaration_list ->  .  declaration
 declaration_list ->  .  declaration_list declaration
 declaration ->  .  dcl_spec init_dcl_list ';'
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 REDUCE  25  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'do' 'default' 'continue'
             'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident' '!'
 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  28  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT  27  declaration
 SHIFT  26  declaration_list
 SHIFT  25  opt_dcl_list
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :  19
 ACCESS SYMBOL :  dcl_specifier
 dcl_specifiers ->  dcl_specifiers dcl_specifier . 

 REDUCE  10  'void' 'int' 'const' '%ident'

 *** KERNEL :  20
 ACCESS SYMBOL :  init_declarator
 init_dcl_list ->  init_declarator . 

 REDUCE  29  ';' ','

 *** KERNEL :  21
 ACCESS SYMBOL :  init_dcl_list
 declaration ->  dcl_spec init_dcl_list .  ';'
 init_dcl_list ->  init_dcl_list .  ',' init_declarator

 SHIFT  30  ','
 SHIFT  29  ';'

 *** KERNEL :  22
 ACCESS SYMBOL :  function_name
 function_header ->  dcl_spec function_name .  formal_param
 formal_param ->  .  '(' opt_formal_param ')'

 SHIFT  32  '('
 SHIFT  31  formal_param

 *** KERNEL :  23
 ACCESS SYMBOL :  declarator
 init_declarator ->  declarator . 
 init_declarator ->  declarator .  '=' '%number'

 REDUCE  31  ';' ','
 SHIFT  33  '='

 *** KERNEL :  24
 ACCESS SYMBOL :  '%ident'
 function_name ->  '%ident' . 
 declarator ->  '%ident' . 
 declarator ->  '%ident' .  '[' opt_number ']'

 REDUCE  33  '=' ';' ','
 REDUCE  16  '('
 SHIFT  34  '['

 *** KERNEL :  25
 ACCESS SYMBOL :  opt_dcl_list
 compound_st ->  '{' opt_dcl_list .  opt_stat_list '}'
 opt_stat_list ->  .  statement_list
 opt_stat_list ->  . 
 statement_list ->  .  statement
 statement_list ->  .  statement_list statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 REDUCE  38  '}'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  44  opt_stat_list
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT  39  statement
 SHIFT  38  statement_list
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL :  26
 ACCESS SYMBOL :  declaration_list
 opt_dcl_list ->  declaration_list . 
 declaration_list ->  declaration_list .  declaration
 declaration ->  .  dcl_spec init_dcl_list ';'
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 REDUCE  24  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'do' 'default' 'continue'
             'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident' '!'
 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  28  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT  77  declaration
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :  27
 ACCESS SYMBOL :  declaration
 declaration_list ->  declaration . 

 REDUCE  26  '}' '{' 'while' 'void' 'switch' 'return' 'int' 'if' 'for' 'do'
             'default' 'continue' 'const' 'case' 'break' ';' '--' '-' '++' '('
             '%number' '%ident' '!'

 *** KERNEL :  28
 ACCESS SYMBOL :  dcl_spec
 declaration ->  dcl_spec .  init_dcl_list ';'
 init_dcl_list ->  .  init_declarator
 init_dcl_list ->  .  init_dcl_list ',' init_declarator
 init_declarator ->  .  declarator
 init_declarator ->  .  declarator '=' '%number'
 declarator ->  .  '%ident'
 declarator ->  .  '%ident' '[' opt_number ']'

 SHIFT  78  '%ident'
 SHIFT  23  declarator
 SHIFT  21  init_dcl_list
 SHIFT  20  init_declarator

 *** KERNEL :  29
 ACCESS SYMBOL :  ';'
 declaration ->  dcl_spec init_dcl_list ';' . 

 REDUCE  28  '}' '{' 'while' 'void' 'switch' 'return' 'int' 'if' 'for' 'do'
             'default' 'continue' 'const' 'case' 'break' '_|_' ';' '--' '-' '++'
             '(' '%number' '%ident' '!'

 *** KERNEL :  30
 ACCESS SYMBOL :  ','
 init_dcl_list ->  init_dcl_list ',' .  init_declarator
 init_declarator ->  .  declarator
 init_declarator ->  .  declarator '=' '%number'
 declarator ->  .  '%ident'
 declarator ->  .  '%ident' '[' opt_number ']'

 SHIFT  78  '%ident'
 SHIFT  23  declarator
 SHIFT  79  init_declarator

 *** KERNEL :  31
 ACCESS SYMBOL :  formal_param
 function_header ->  dcl_spec function_name formal_param . 

 REDUCE   7  '{'

 *** KERNEL :  32
 ACCESS SYMBOL :  '('
 formal_param ->  '(' .  opt_formal_param ')'
 opt_formal_param ->  .  formal_param_list
 opt_formal_param ->  . 
 formal_param_list ->  .  param_dcl
 formal_param_list ->  .  formal_param_list ',' param_dcl
 param_dcl ->  .  dcl_spec declarator
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 REDUCE  19  ')'
 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  83  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT  82  formal_param_list
 SHIFT  81  opt_formal_param
 SHIFT  80  param_dcl
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL :  33
 ACCESS SYMBOL :  '='
 init_declarator ->  declarator '=' .  '%number'

 SHIFT  84  '%number'

 *** KERNEL :  34
 ACCESS SYMBOL :  '['
 declarator ->  '%ident' '[' .  opt_number ']'
 opt_number ->  .  '%number'
 opt_number ->  . 

 REDUCE  36  ']'
 SHIFT  86  '%number'
 SHIFT  85  opt_number

 *** KERNEL :  35
 ACCESS SYMBOL :  while_st
 statement ->  while_st . 

 REDUCE  44  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  36
 ACCESS SYMBOL :  unary_exp
 assignment_exp ->  unary_exp .  '=' assignment_exp
 assignment_exp ->  unary_exp .  '+=' assignment_exp
 assignment_exp ->  unary_exp .  '-=' assignment_exp
 assignment_exp ->  unary_exp .  '*=' assignment_exp
 assignment_exp ->  unary_exp .  '/=' assignment_exp
 assignment_exp ->  unary_exp .  '%=' assignment_exp
 multiplicative_exp ->  unary_exp . 

 REDUCE  91  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '/'
             '-' ',' '+' '*' ')' '&&' '%' '!='
 SHIFT  92  '%='
 SHIFT  91  '*='
 SHIFT  90  '+='
 SHIFT  89  '-='
 SHIFT  88  '/='
 SHIFT  87  '='

 *** KERNEL :  37
 ACCESS SYMBOL :  switch_st
 statement ->  switch_st . 

 REDUCE  46  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  38
 ACCESS SYMBOL :  statement_list
 opt_stat_list ->  statement_list . 
 statement_list ->  statement_list .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 REDUCE  37  '}'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT  93  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL :  39
 ACCESS SYMBOL :  statement
 statement_list ->  statement . 

 REDUCE  39  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'do' 'default' 'continue'
             'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident' '!'

 *** KERNEL :  40
 ACCESS SYMBOL :  return_st
 statement ->  return_st . 

 REDUCE  50  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  41
 ACCESS SYMBOL :  relational_exp
 equality_exp ->  relational_exp . 
 relational_exp ->  relational_exp .  '>' additive_exp
 relational_exp ->  relational_exp .  '<' additive_exp
 relational_exp ->  relational_exp .  '>=' additive_exp
 relational_exp ->  relational_exp .  '<=' additive_exp

 REDUCE  80  '||' ']' '==' ';' ':' ',' ')' '&&' '!='
 SHIFT  97  '<'
 SHIFT  96  '<='
 SHIFT  95  '>'
 SHIFT  94  '>='

 *** KERNEL :  42
 ACCESS SYMBOL :  primary_exp
 postfix_exp ->  primary_exp . 

 REDUCE 100  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL :  43
 ACCESS SYMBOL :  postfix_exp
 unary_exp ->  postfix_exp . 
 postfix_exp ->  postfix_exp .  '[' expression ']'
 postfix_exp ->  postfix_exp .  '(' opt_actual_param ')'
 postfix_exp ->  postfix_exp .  '++'
 postfix_exp ->  postfix_exp .  '--'

 REDUCE  95  '||' ']' '>=' '>' '==' '=' '<=' '<' ';' ':'
             '/=' '/' '-=' '-' ',' '+=' '+' '*=' '*' ')'
             '&&' '%=' '%' '!='
 SHIFT 101  '('
 SHIFT 100  '++'
 SHIFT  99  '--'
 SHIFT  98  '['

 *** KERNEL :  44
 ACCESS SYMBOL :  opt_stat_list
 compound_st ->  '{' opt_dcl_list opt_stat_list .  '}'

 SHIFT 102  '}'

 *** KERNEL :  45
 ACCESS SYMBOL :  opt_expression
 expression_st ->  opt_expression .  ';'

 SHIFT 103  ';'

 *** KERNEL :  46
 ACCESS SYMBOL :  multiplicative_exp
 additive_exp ->  multiplicative_exp . 
 multiplicative_exp ->  multiplicative_exp .  '*' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '/' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '%' unary_exp

 REDUCE  88  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '-'
             ',' '+' ')' '&&' '!='
 SHIFT 106  '%'
 SHIFT 105  '*'
 SHIFT 104  '/'

 *** KERNEL :  47
 ACCESS SYMBOL :  logical_or_exp
 assignment_exp ->  logical_or_exp . 
 logical_or_exp ->  logical_or_exp .  '||' logical_and_exp

 REDUCE  69  ']' ';' ':' ',' ')'
 SHIFT 107  '||'

 *** KERNEL :  48
 ACCESS SYMBOL :  logical_and_exp
 logical_or_exp ->  logical_and_exp . 
 logical_and_exp ->  logical_and_exp .  '&&' equality_exp

 REDUCE  76  '||' ']' ';' ':' ',' ')'
 SHIFT 108  '&&'

 *** KERNEL :  49
 ACCESS SYMBOL :  labeled_st
 statement ->  labeled_st . 

 REDUCE  47  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  50
 ACCESS SYMBOL :  jump_st
 statement ->  jump_st . 

 REDUCE  48  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  51
 ACCESS SYMBOL :  if_st
 statement ->  if_st . 

 REDUCE  43  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  52
 ACCESS SYMBOL :  for_st
 statement ->  for_st . 

 REDUCE  49  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  53
 ACCESS SYMBOL :  expression_st
 statement ->  expression_st . 

 REDUCE  42  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  54
 ACCESS SYMBOL :  expression
 opt_expression ->  expression . 

 REDUCE  52  ';' ')'

 *** KERNEL :  55
 ACCESS SYMBOL :  equality_exp
 logical_and_exp ->  equality_exp . 
 equality_exp ->  equality_exp .  '==' relational_exp
 equality_exp ->  equality_exp .  '!=' relational_exp

 REDUCE  78  '||' ']' ';' ':' ',' ')' '&&'
 SHIFT 110  '!='
 SHIFT 109  '=='

 *** KERNEL :  56
 ACCESS SYMBOL :  do_while_st
 statement ->  do_while_st . 

 REDUCE  45  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  57
 ACCESS SYMBOL :  compound_st
 statement ->  compound_st . 

 REDUCE  41  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL :  58
 ACCESS SYMBOL :  assignment_exp
 expression ->  assignment_exp . 

 REDUCE  68  ']' ';' ':' ')'

 *** KERNEL :  59
 ACCESS SYMBOL :  additive_exp
 relational_exp ->  additive_exp . 
 additive_exp ->  additive_exp .  '+' multiplicative_exp
 additive_exp ->  additive_exp .  '-' multiplicative_exp

 REDUCE  83  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' ','
             ')' '&&' '!='
 SHIFT 112  '+'
 SHIFT 111  '-'

 *** KERNEL :  60
 ACCESS SYMBOL :  'while'
 while_st ->  'while' .  '(' expression ')' statement

 SHIFT 113  '('

 *** KERNEL :  61
 ACCESS SYMBOL :  'switch'
 switch_st ->  'switch' .  '(' expression ')' statement

 SHIFT 114  '('

 *** KERNEL :  62
 ACCESS SYMBOL :  'return'
 return_st ->  'return' .  opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT 115  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  63
 ACCESS SYMBOL :  'if'
 if_st ->  'if' .  '(' expression ')' statement
 if_st ->  'if' .  '(' expression ')' statement 'else' statement

 SHIFT 116  '('

 *** KERNEL :  64
 ACCESS SYMBOL :  'for'
 for_st ->  'for' .  '(' init_part ';' condition_part ';' post_part ')' statement

 SHIFT 117  '('

 *** KERNEL :  65
 ACCESS SYMBOL :  'do'
 do_while_st ->  'do' .  statement 'while' '(' expression ')' ';'
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 118  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL :  66
 ACCESS SYMBOL :  'default'
 labeled_st ->  'default' .  ':' statement

 SHIFT 119  ':'

 *** KERNEL :  67
 ACCESS SYMBOL :  'continue'
 jump_st ->  'continue' .  ';'

 SHIFT 120  ';'

 *** KERNEL :  68
 ACCESS SYMBOL :  'case'
 labeled_st ->  'case' .  expression ':' statement
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 121  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  69
 ACCESS SYMBOL :  'break'
 jump_st ->  'break' .  ';'

 SHIFT 122  ';'

 *** KERNEL :  70
 ACCESS SYMBOL :  '--'
 unary_exp ->  '--' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 123  unary_exp

 *** KERNEL :  71
 ACCESS SYMBOL :  '-'
 unary_exp ->  '-' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 124  unary_exp

 *** KERNEL :  72
 ACCESS SYMBOL :  '++'
 unary_exp ->  '++' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 125  unary_exp

 *** KERNEL :  73
 ACCESS SYMBOL :  '('
 primary_exp ->  '(' .  expression ')'
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 126  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  74
 ACCESS SYMBOL :  '%number'
 primary_exp ->  '%number' . 

 REDUCE 111  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL :  75
 ACCESS SYMBOL :  '%ident'
 primary_exp ->  '%ident' . 

 REDUCE 110  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL :  76
 ACCESS SYMBOL :  '!'
 unary_exp ->  '!' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 127  unary_exp

 *** KERNEL :  77
 ACCESS SYMBOL :  declaration
 declaration_list ->  declaration_list declaration . 

 REDUCE  27  '}' '{' 'while' 'void' 'switch' 'return' 'int' 'if' 'for' 'do'
             'default' 'continue' 'const' 'case' 'break' ';' '--' '-' '++' '('
             '%number' '%ident' '!'

 *** KERNEL :  78
 ACCESS SYMBOL :  '%ident'
 declarator ->  '%ident' . 
 declarator ->  '%ident' .  '[' opt_number ']'

 REDUCE  33  '=' ';' ',' ')'
 SHIFT  34  '['

 *** KERNEL :  79
 ACCESS SYMBOL :  init_declarator
 init_dcl_list ->  init_dcl_list ',' init_declarator . 

 REDUCE  30  ';' ','

 *** KERNEL :  80
 ACCESS SYMBOL :  param_dcl
 formal_param_list ->  param_dcl . 

 REDUCE  20  ',' ')'

 *** KERNEL :  81
 ACCESS SYMBOL :  opt_formal_param
 formal_param ->  '(' opt_formal_param .  ')'

 SHIFT 128  ')'

 *** KERNEL :  82
 ACCESS SYMBOL :  formal_param_list
 opt_formal_param ->  formal_param_list . 
 formal_param_list ->  formal_param_list .  ',' param_dcl

 REDUCE  18  ')'
 SHIFT 129  ','

 *** KERNEL :  83
 ACCESS SYMBOL :  dcl_spec
 param_dcl ->  dcl_spec .  declarator
 declarator ->  .  '%ident'
 declarator ->  .  '%ident' '[' opt_number ']'

 SHIFT  78  '%ident'
 SHIFT 130  declarator

 *** KERNEL :  84
 ACCESS SYMBOL :  '%number'
 init_declarator ->  declarator '=' '%number' . 

 REDUCE  32  ';' ','

 *** KERNEL :  85
 ACCESS SYMBOL :  opt_number
 declarator ->  '%ident' '[' opt_number .  ']'

 SHIFT 131  ']'

 *** KERNEL :  86
 ACCESS SYMBOL :  '%number'
 opt_number ->  '%number' . 

 REDUCE  35  ']'

 *** KERNEL :  87
 ACCESS SYMBOL :  '='
 assignment_exp ->  unary_exp '=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 132  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  88
 ACCESS SYMBOL :  '/='
 assignment_exp ->  unary_exp '/=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 133  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  89
 ACCESS SYMBOL :  '-='
 assignment_exp ->  unary_exp '-=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 134  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  90
 ACCESS SYMBOL :  '+='
 assignment_exp ->  unary_exp '+=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 135  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  91
 ACCESS SYMBOL :  '*='
 assignment_exp ->  unary_exp '*=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 136  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  92
 ACCESS SYMBOL :  '%='
 assignment_exp ->  unary_exp '%=' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 137  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  93
 ACCESS SYMBOL :  statement
 statement_list ->  statement_list statement . 

 REDUCE  40  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'do' 'default' 'continue'
             'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident' '!'

 *** KERNEL :  94
 ACCESS SYMBOL :  '>='
 relational_exp ->  relational_exp '>=' .  additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 139  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL :  95
 ACCESS SYMBOL :  '>'
 relational_exp ->  relational_exp '>' .  additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 140  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL :  96
 ACCESS SYMBOL :  '<='
 relational_exp ->  relational_exp '<=' .  additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 141  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL :  97
 ACCESS SYMBOL :  '<'
 relational_exp ->  relational_exp '<' .  additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 142  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL :  98
 ACCESS SYMBOL :  '['
 postfix_exp ->  postfix_exp '[' .  expression ']'
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 143  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL :  99
 ACCESS SYMBOL :  '--'
 postfix_exp ->  postfix_exp '--' . 

 REDUCE 104  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL : 100
 ACCESS SYMBOL :  '++'
 postfix_exp ->  postfix_exp '++' . 

 REDUCE 103  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL : 101
 ACCESS SYMBOL :  '('
 postfix_exp ->  postfix_exp '(' .  opt_actual_param ')'
 opt_actual_param ->  .  actual_param
 opt_actual_param ->  . 
 actual_param ->  .  actual_param_list
 actual_param_list ->  .  assignment_exp
 actual_param_list ->  .  actual_param_list ',' assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE 106  ')'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 147  actual_param
 SHIFT 146  actual_param_list
 SHIFT  59  additive_exp
 SHIFT 145  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT 144  opt_actual_param
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 102
 ACCESS SYMBOL :  '}'
 compound_st ->  '{' opt_dcl_list opt_stat_list '}' . 

 REDUCE  23  '}' '{' 'while' 'void' 'switch' 'return' 'int' 'if' 'for' 'else'
             'do' 'default' 'continue' 'const' 'case' 'break' '_|_' ';' '--' '-'
             '++' '(' '%number' '%ident' '!'

 *** KERNEL : 103
 ACCESS SYMBOL :  ';'
 expression_st ->  opt_expression ';' . 

 REDUCE  51  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 104
 ACCESS SYMBOL :  '/'
 multiplicative_exp ->  multiplicative_exp '/' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 148  unary_exp

 *** KERNEL : 105
 ACCESS SYMBOL :  '*'
 multiplicative_exp ->  multiplicative_exp '*' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 149  unary_exp

 *** KERNEL : 106
 ACCESS SYMBOL :  '%'
 multiplicative_exp ->  multiplicative_exp '%' .  unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 150  unary_exp

 *** KERNEL : 107
 ACCESS SYMBOL :  '||'
 logical_or_exp ->  logical_or_exp '||' .  logical_and_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  55  equality_exp
 SHIFT 151  logical_and_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT 138  unary_exp

 *** KERNEL : 108
 ACCESS SYMBOL :  '&&'
 logical_and_exp ->  logical_and_exp '&&' .  equality_exp
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 152  equality_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT 138  unary_exp

 *** KERNEL : 109
 ACCESS SYMBOL :  '=='
 equality_exp ->  equality_exp '==' .  relational_exp
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 153  relational_exp
 SHIFT 138  unary_exp

 *** KERNEL : 110
 ACCESS SYMBOL :  '!='
 equality_exp ->  equality_exp '!=' .  relational_exp
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 154  relational_exp
 SHIFT 138  unary_exp

 *** KERNEL : 111
 ACCESS SYMBOL :  '-'
 additive_exp ->  additive_exp '-' .  multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 155  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL : 112
 ACCESS SYMBOL :  '+'
 additive_exp ->  additive_exp '+' .  multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT 156  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT 138  unary_exp

 *** KERNEL : 113
 ACCESS SYMBOL :  '('
 while_st ->  'while' '(' .  expression ')' statement
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 157  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 114
 ACCESS SYMBOL :  '('
 switch_st ->  'switch' '(' .  expression ')' statement
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 158  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 115
 ACCESS SYMBOL :  opt_expression
 return_st ->  'return' opt_expression .  ';'

 SHIFT 159  ';'

 *** KERNEL : 116
 ACCESS SYMBOL :  '('
 if_st ->  'if' '(' .  expression ')' statement
 if_st ->  'if' '(' .  expression ')' statement 'else' statement
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 160  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 117
 ACCESS SYMBOL :  '('
 for_st ->  'for' '(' .  init_part ';' condition_part ';' post_part ')' statement
 init_part ->  .  opt_expression
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT 162  init_part
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT 161  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 118
 ACCESS SYMBOL :  statement
 do_while_st ->  'do' statement .  'while' '(' expression ')' ';'

 SHIFT 163  'while'

 *** KERNEL : 119
 ACCESS SYMBOL :  ':'
 labeled_st ->  'default' ':' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 164  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 120
 ACCESS SYMBOL :  ';'
 jump_st ->  'continue' ';' . 

 REDUCE  56  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 121
 ACCESS SYMBOL :  expression
 labeled_st ->  'case' expression .  ':' statement

 SHIFT 165  ':'

 *** KERNEL : 122
 ACCESS SYMBOL :  ';'
 jump_st ->  'break' ';' . 

 REDUCE  57  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 123
 ACCESS SYMBOL :  unary_exp
 unary_exp ->  '--' unary_exp . 

 REDUCE  99  '||' ']' '>=' '>' '==' '=' '<=' '<' ';' ':'
             '/=' '/' '-=' '-' ',' '+=' '+' '*=' '*' ')'
             '&&' '%=' '%' '!='

 *** KERNEL : 124
 ACCESS SYMBOL :  unary_exp
 unary_exp ->  '-' unary_exp . 

 REDUCE  96  '||' ']' '>=' '>' '==' '=' '<=' '<' ';' ':'
             '/=' '/' '-=' '-' ',' '+=' '+' '*=' '*' ')'
             '&&' '%=' '%' '!='

 *** KERNEL : 125
 ACCESS SYMBOL :  unary_exp
 unary_exp ->  '++' unary_exp . 

 REDUCE  98  '||' ']' '>=' '>' '==' '=' '<=' '<' ';' ':'
             '/=' '/' '-=' '-' ',' '+=' '+' '*=' '*' ')'
             '&&' '%=' '%' '!='

 *** KERNEL : 126
 ACCESS SYMBOL :  expression
 primary_exp ->  '(' expression .  ')'

 SHIFT 166  ')'

 *** KERNEL : 127
 ACCESS SYMBOL :  unary_exp
 unary_exp ->  '!' unary_exp . 

 REDUCE  97  '||' ']' '>=' '>' '==' '=' '<=' '<' ';' ':'
             '/=' '/' '-=' '-' ',' '+=' '+' '*=' '*' ')'
             '&&' '%=' '%' '!='

 *** KERNEL : 128
 ACCESS SYMBOL :  ')'
 formal_param ->  '(' opt_formal_param ')' . 

 REDUCE  17  '{'

 *** KERNEL : 129
 ACCESS SYMBOL :  ','
 formal_param_list ->  formal_param_list ',' .  param_dcl
 param_dcl ->  .  dcl_spec declarator
 dcl_spec ->  .  dcl_specifiers
 dcl_specifiers ->  .  dcl_specifier
 dcl_specifiers ->  .  dcl_specifiers dcl_specifier
 dcl_specifier ->  .  type_qualifier
 dcl_specifier ->  .  type_specifier
 type_qualifier ->  .  'const'
 type_specifier ->  .  'int'
 type_specifier ->  .  'void'

 SHIFT  14  'const'
 SHIFT  13  'int'
 SHIFT  12  'void'
 SHIFT  83  dcl_spec
 SHIFT  10  dcl_specifier
 SHIFT   9  dcl_specifiers
 SHIFT 167  param_dcl
 SHIFT   2  type_qualifier
 SHIFT   1  type_specifier

 *** KERNEL : 130
 ACCESS SYMBOL :  declarator
 param_dcl ->  dcl_spec declarator . 

 REDUCE  22  ',' ')'

 *** KERNEL : 131
 ACCESS SYMBOL :  ']'
 declarator ->  '%ident' '[' opt_number ']' . 

 REDUCE  34  '=' ';' ',' ')'

 *** KERNEL : 132
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '=' assignment_exp . 

 REDUCE  70  ']' ';' ':' ',' ')'

 *** KERNEL : 133
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '/=' assignment_exp . 

 REDUCE  74  ']' ';' ':' ',' ')'

 *** KERNEL : 134
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '-=' assignment_exp . 

 REDUCE  72  ']' ';' ':' ',' ')'

 *** KERNEL : 135
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '+=' assignment_exp . 

 REDUCE  71  ']' ';' ':' ',' ')'

 *** KERNEL : 136
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '*=' assignment_exp . 

 REDUCE  73  ']' ';' ':' ',' ')'

 *** KERNEL : 137
 ACCESS SYMBOL :  assignment_exp
 assignment_exp ->  unary_exp '%=' assignment_exp . 

 REDUCE  75  ']' ';' ':' ',' ')'

 *** KERNEL : 138
 ACCESS SYMBOL :  unary_exp
 multiplicative_exp ->  unary_exp . 

 REDUCE  91  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '/'
             '-' ',' '+' '*' ')' '&&' '%' '!='

 *** KERNEL : 139
 ACCESS SYMBOL :  additive_exp
 relational_exp ->  relational_exp '>=' additive_exp . 
 additive_exp ->  additive_exp .  '+' multiplicative_exp
 additive_exp ->  additive_exp .  '-' multiplicative_exp

 REDUCE  86  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' ','
             ')' '&&' '!='
 SHIFT 112  '+'
 SHIFT 111  '-'

 *** KERNEL : 140
 ACCESS SYMBOL :  additive_exp
 relational_exp ->  relational_exp '>' additive_exp . 
 additive_exp ->  additive_exp .  '+' multiplicative_exp
 additive_exp ->  additive_exp .  '-' multiplicative_exp

 REDUCE  84  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' ','
             ')' '&&' '!='
 SHIFT 112  '+'
 SHIFT 111  '-'

 *** KERNEL : 141
 ACCESS SYMBOL :  additive_exp
 relational_exp ->  relational_exp '<=' additive_exp . 
 additive_exp ->  additive_exp .  '+' multiplicative_exp
 additive_exp ->  additive_exp .  '-' multiplicative_exp

 REDUCE  87  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' ','
             ')' '&&' '!='
 SHIFT 112  '+'
 SHIFT 111  '-'

 *** KERNEL : 142
 ACCESS SYMBOL :  additive_exp
 relational_exp ->  relational_exp '<' additive_exp . 
 additive_exp ->  additive_exp .  '+' multiplicative_exp
 additive_exp ->  additive_exp .  '-' multiplicative_exp

 REDUCE  85  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' ','
             ')' '&&' '!='
 SHIFT 112  '+'
 SHIFT 111  '-'

 *** KERNEL : 143
 ACCESS SYMBOL :  expression
 postfix_exp ->  postfix_exp '[' expression .  ']'

 SHIFT 168  ']'

 *** KERNEL : 144
 ACCESS SYMBOL :  opt_actual_param
 postfix_exp ->  postfix_exp '(' opt_actual_param .  ')'

 SHIFT 169  ')'

 *** KERNEL : 145
 ACCESS SYMBOL :  assignment_exp
 actual_param_list ->  assignment_exp . 

 REDUCE 108  ',' ')'

 *** KERNEL : 146
 ACCESS SYMBOL :  actual_param_list
 actual_param ->  actual_param_list . 
 actual_param_list ->  actual_param_list .  ',' assignment_exp

 REDUCE 107  ')'
 SHIFT 170  ','

 *** KERNEL : 147
 ACCESS SYMBOL :  actual_param
 opt_actual_param ->  actual_param . 

 REDUCE 105  ')'

 *** KERNEL : 148
 ACCESS SYMBOL :  unary_exp
 multiplicative_exp ->  multiplicative_exp '/' unary_exp . 

 REDUCE  93  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '/'
             '-' ',' '+' '*' ')' '&&' '%' '!='

 *** KERNEL : 149
 ACCESS SYMBOL :  unary_exp
 multiplicative_exp ->  multiplicative_exp '*' unary_exp . 

 REDUCE  92  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '/'
             '-' ',' '+' '*' ')' '&&' '%' '!='

 *** KERNEL : 150
 ACCESS SYMBOL :  unary_exp
 multiplicative_exp ->  multiplicative_exp '%' unary_exp . 

 REDUCE  94  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '/'
             '-' ',' '+' '*' ')' '&&' '%' '!='

 *** KERNEL : 151
 ACCESS SYMBOL :  logical_and_exp
 logical_or_exp ->  logical_or_exp '||' logical_and_exp . 
 logical_and_exp ->  logical_and_exp .  '&&' equality_exp

 REDUCE  77  '||' ']' ';' ':' ',' ')'
 SHIFT 108  '&&'

 *** KERNEL : 152
 ACCESS SYMBOL :  equality_exp
 logical_and_exp ->  logical_and_exp '&&' equality_exp . 
 equality_exp ->  equality_exp .  '==' relational_exp
 equality_exp ->  equality_exp .  '!=' relational_exp

 REDUCE  79  '||' ']' ';' ':' ',' ')' '&&'
 SHIFT 110  '!='
 SHIFT 109  '=='

 *** KERNEL : 153
 ACCESS SYMBOL :  relational_exp
 equality_exp ->  equality_exp '==' relational_exp . 
 relational_exp ->  relational_exp .  '>' additive_exp
 relational_exp ->  relational_exp .  '<' additive_exp
 relational_exp ->  relational_exp .  '>=' additive_exp
 relational_exp ->  relational_exp .  '<=' additive_exp

 REDUCE  81  '||' ']' '==' ';' ':' ',' ')' '&&' '!='
 SHIFT  97  '<'
 SHIFT  96  '<='
 SHIFT  95  '>'
 SHIFT  94  '>='

 *** KERNEL : 154
 ACCESS SYMBOL :  relational_exp
 equality_exp ->  equality_exp '!=' relational_exp . 
 relational_exp ->  relational_exp .  '>' additive_exp
 relational_exp ->  relational_exp .  '<' additive_exp
 relational_exp ->  relational_exp .  '>=' additive_exp
 relational_exp ->  relational_exp .  '<=' additive_exp

 REDUCE  82  '||' ']' '==' ';' ':' ',' ')' '&&' '!='
 SHIFT  97  '<'
 SHIFT  96  '<='
 SHIFT  95  '>'
 SHIFT  94  '>='

 *** KERNEL : 155
 ACCESS SYMBOL :  multiplicative_exp
 additive_exp ->  additive_exp '-' multiplicative_exp . 
 multiplicative_exp ->  multiplicative_exp .  '*' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '/' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '%' unary_exp

 REDUCE  90  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '-'
             ',' '+' ')' '&&' '!='
 SHIFT 106  '%'
 SHIFT 105  '*'
 SHIFT 104  '/'

 *** KERNEL : 156
 ACCESS SYMBOL :  multiplicative_exp
 additive_exp ->  additive_exp '+' multiplicative_exp . 
 multiplicative_exp ->  multiplicative_exp .  '*' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '/' unary_exp
 multiplicative_exp ->  multiplicative_exp .  '%' unary_exp

 REDUCE  89  '||' ']' '>=' '>' '==' '<=' '<' ';' ':' '-'
             ',' '+' ')' '&&' '!='
 SHIFT 106  '%'
 SHIFT 105  '*'
 SHIFT 104  '/'

 *** KERNEL : 157
 ACCESS SYMBOL :  expression
 while_st ->  'while' '(' expression .  ')' statement

 SHIFT 171  ')'

 *** KERNEL : 158
 ACCESS SYMBOL :  expression
 switch_st ->  'switch' '(' expression .  ')' statement

 SHIFT 172  ')'

 *** KERNEL : 159
 ACCESS SYMBOL :  ';'
 return_st ->  'return' opt_expression ';' . 

 REDUCE  67  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 160
 ACCESS SYMBOL :  expression
 if_st ->  'if' '(' expression .  ')' statement
 if_st ->  'if' '(' expression .  ')' statement 'else' statement

 SHIFT 173  ')'

 *** KERNEL : 161
 ACCESS SYMBOL :  opt_expression
 init_part ->  opt_expression . 

 REDUCE  64  ';'

 *** KERNEL : 162
 ACCESS SYMBOL :  init_part
 for_st ->  'for' '(' init_part .  ';' condition_part ';' post_part ')' statement

 SHIFT 174  ';'

 *** KERNEL : 163
 ACCESS SYMBOL :  'while'
 do_while_st ->  'do' statement 'while' .  '(' expression ')' ';'

 SHIFT 175  '('

 *** KERNEL : 164
 ACCESS SYMBOL :  statement
 labeled_st ->  'default' ':' statement . 

 REDUCE  55  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 165
 ACCESS SYMBOL :  ':'
 labeled_st ->  'case' expression ':' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 176  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 166
 ACCESS SYMBOL :  ')'
 primary_exp ->  '(' expression ')' . 

 REDUCE 112  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL : 167
 ACCESS SYMBOL :  param_dcl
 formal_param_list ->  formal_param_list ',' param_dcl . 

 REDUCE  21  ',' ')'

 *** KERNEL : 168
 ACCESS SYMBOL :  ']'
 postfix_exp ->  postfix_exp '[' expression ']' . 

 REDUCE 101  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL : 169
 ACCESS SYMBOL :  ')'
 postfix_exp ->  postfix_exp '(' opt_actual_param ')' . 

 REDUCE 102  '||' ']' '[' '>=' '>' '==' '=' '<=' '<' ';'
             ':' '/=' '/' '-=' '--' '-' ',' '+=' '++' '+'
             '*=' '*' ')' '(' '&&' '%=' '%' '!='

 *** KERNEL : 170
 ACCESS SYMBOL :  ','
 actual_param_list ->  actual_param_list ',' .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT 177  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 171
 ACCESS SYMBOL :  ')'
 while_st ->  'while' '(' expression ')' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 178  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 172
 ACCESS SYMBOL :  ')'
 switch_st ->  'switch' '(' expression ')' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 179  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 173
 ACCESS SYMBOL :  ')'
 if_st ->  'if' '(' expression ')' .  statement
 if_st ->  'if' '(' expression ')' .  statement 'else' statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 180  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 174
 ACCESS SYMBOL :  ';'
 for_st ->  'for' '(' init_part ';' .  condition_part ';' post_part ')' statement
 condition_part ->  .  opt_expression
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT 182  condition_part
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT 181  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 175
 ACCESS SYMBOL :  '('
 do_while_st ->  'do' statement 'while' '(' .  expression ')' ';'
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT 183  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 176
 ACCESS SYMBOL :  statement
 labeled_st ->  'case' expression ':' statement . 

 REDUCE  54  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 177
 ACCESS SYMBOL :  assignment_exp
 actual_param_list ->  actual_param_list ',' assignment_exp . 

 REDUCE 109  ',' ')'

 *** KERNEL : 178
 ACCESS SYMBOL :  statement
 while_st ->  'while' '(' expression ')' statement . 

 REDUCE  60  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 179
 ACCESS SYMBOL :  statement
 switch_st ->  'switch' '(' expression ')' statement . 

 REDUCE  62  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 180
 ACCESS SYMBOL :  statement
 if_st ->  'if' '(' expression ')' statement . 
 if_st ->  'if' '(' expression ')' statement .  'else' statement

 REDUCE  58  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'
 SHIFT 184  'else'

 *** CONFLICT SYMBOL :  'else'

 *** KERNEL : 180
 ACCESS SYMBOL :  statement
 if_st ->  'if' '(' expression ')' statement . 
 if_st ->  'if' '(' expression ')' statement .  'else' statement

 REDUCE  58  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'
 SHIFT 184  'else'

 *** KERNEL : 181
 ACCESS SYMBOL :  opt_expression
 condition_part ->  opt_expression . 

 REDUCE  65  ';'

 *** KERNEL : 182
 ACCESS SYMBOL :  condition_part
 for_st ->  'for' '(' init_part ';' condition_part .  ';' post_part ')' statement

 SHIFT 185  ';'

 *** KERNEL : 183
 ACCESS SYMBOL :  expression
 do_while_st ->  'do' statement 'while' '(' expression .  ')' ';'

 SHIFT 186  ')'

 *** KERNEL : 184
 ACCESS SYMBOL :  'else'
 if_st ->  'if' '(' expression ')' statement 'else' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 187  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 185
 ACCESS SYMBOL :  ';'
 for_st ->  'for' '(' init_part ';' condition_part ';' .  post_part ')' statement
 post_part ->  .  opt_expression
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ')'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT 189  opt_expression
 SHIFT 188  post_part
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  36  unary_exp

 *** KERNEL : 186
 ACCESS SYMBOL :  ')'
 do_while_st ->  'do' statement 'while' '(' expression ')' .  ';'

 SHIFT 190  ';'

 *** KERNEL : 187
 ACCESS SYMBOL :  statement
 if_st ->  'if' '(' expression ')' statement 'else' statement . 

 REDUCE  59  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 188
 ACCESS SYMBOL :  post_part
 for_st ->  'for' '(' init_part ';' condition_part ';' post_part .  ')' statement

 SHIFT 191  ')'

 *** KERNEL : 189
 ACCESS SYMBOL :  opt_expression
 post_part ->  opt_expression . 

 REDUCE  66  ')'

 *** KERNEL : 190
 ACCESS SYMBOL :  ';'
 do_while_st ->  'do' statement 'while' '(' expression ')' ';' . 

 REDUCE  61  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 *** KERNEL : 191
 ACCESS SYMBOL :  ')'
 for_st ->  'for' '(' init_part ';' condition_part ';' post_part ')' .  statement
 statement ->  .  compound_st
 statement ->  .  expression_st
 statement ->  .  if_st
 statement ->  .  while_st
 statement ->  .  do_while_st
 statement ->  .  switch_st
 statement ->  .  labeled_st
 statement ->  .  jump_st
 statement ->  .  for_st
 statement ->  .  return_st
 compound_st ->  .  '{' opt_dcl_list opt_stat_list '}'
 expression_st ->  .  opt_expression ';'
 if_st ->  .  'if' '(' expression ')' statement
 if_st ->  .  'if' '(' expression ')' statement 'else' statement
 while_st ->  .  'while' '(' expression ')' statement
 do_while_st ->  .  'do' statement 'while' '(' expression ')' ';'
 switch_st ->  .  'switch' '(' expression ')' statement
 labeled_st ->  .  'case' expression ':' statement
 labeled_st ->  .  'default' ':' statement
 jump_st ->  .  'continue' ';'
 jump_st ->  .  'break' ';'
 for_st ->  .  'for' '(' init_part ';' condition_part ';' post_part ')' statement
 return_st ->  .  'return' opt_expression ';'
 opt_expression ->  .  expression
 opt_expression ->  . 
 expression ->  .  assignment_exp
 assignment_exp ->  .  logical_or_exp
 assignment_exp ->  .  unary_exp '=' assignment_exp
 assignment_exp ->  .  unary_exp '+=' assignment_exp
 assignment_exp ->  .  unary_exp '-=' assignment_exp
 assignment_exp ->  .  unary_exp '*=' assignment_exp
 assignment_exp ->  .  unary_exp '/=' assignment_exp
 assignment_exp ->  .  unary_exp '%=' assignment_exp
 logical_or_exp ->  .  logical_and_exp
 logical_or_exp ->  .  logical_or_exp '||' logical_and_exp
 unary_exp ->  .  postfix_exp
 unary_exp ->  .  '-' unary_exp
 unary_exp ->  .  '!' unary_exp
 unary_exp ->  .  '++' unary_exp
 unary_exp ->  .  '--' unary_exp
 logical_and_exp ->  .  equality_exp
 logical_and_exp ->  .  logical_and_exp '&&' equality_exp
 postfix_exp ->  .  primary_exp
 postfix_exp ->  .  postfix_exp '[' expression ']'
 postfix_exp ->  .  postfix_exp '(' opt_actual_param ')'
 postfix_exp ->  .  postfix_exp '++'
 postfix_exp ->  .  postfix_exp '--'
 equality_exp ->  .  relational_exp
 equality_exp ->  .  equality_exp '==' relational_exp
 equality_exp ->  .  equality_exp '!=' relational_exp
 primary_exp ->  .  '%ident'
 primary_exp ->  .  '%number'
 primary_exp ->  .  '(' expression ')'
 relational_exp ->  .  additive_exp
 relational_exp ->  .  relational_exp '>' additive_exp
 relational_exp ->  .  relational_exp '<' additive_exp
 relational_exp ->  .  relational_exp '>=' additive_exp
 relational_exp ->  .  relational_exp '<=' additive_exp
 additive_exp ->  .  multiplicative_exp
 additive_exp ->  .  additive_exp '+' multiplicative_exp
 additive_exp ->  .  additive_exp '-' multiplicative_exp
 multiplicative_exp ->  .  unary_exp
 multiplicative_exp ->  .  multiplicative_exp '*' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '/' unary_exp
 multiplicative_exp ->  .  multiplicative_exp '%' unary_exp

 REDUCE  53  ';'
 SHIFT  76  '!'
 SHIFT  75  '%ident'
 SHIFT  74  '%number'
 SHIFT  73  '('
 SHIFT  72  '++'
 SHIFT  71  '-'
 SHIFT  70  '--'
 SHIFT  69  'break'
 SHIFT  68  'case'
 SHIFT  67  'continue'
 SHIFT  66  'default'
 SHIFT  65  'do'
 SHIFT  64  'for'
 SHIFT  63  'if'
 SHIFT  62  'return'
 SHIFT  61  'switch'
 SHIFT  60  'while'
 SHIFT  18  '{'
 SHIFT  59  additive_exp
 SHIFT  58  assignment_exp
 SHIFT  57  compound_st
 SHIFT  56  do_while_st
 SHIFT  55  equality_exp
 SHIFT  54  expression
 SHIFT  53  expression_st
 SHIFT  52  for_st
 SHIFT  51  if_st
 SHIFT  50  jump_st
 SHIFT  49  labeled_st
 SHIFT  48  logical_and_exp
 SHIFT  47  logical_or_exp
 SHIFT  46  multiplicative_exp
 SHIFT  45  opt_expression
 SHIFT  43  postfix_exp
 SHIFT  42  primary_exp
 SHIFT  41  relational_exp
 SHIFT  40  return_st
 SHIFT 192  statement
 SHIFT  37  switch_st
 SHIFT  36  unary_exp
 SHIFT  35  while_st

 *** KERNEL : 192
 ACCESS SYMBOL :  statement
 for_st ->  'for' '(' init_part ';' condition_part ';' post_part ')' statement . 

 REDUCE  63  '}' '{' 'while' 'switch' 'return' 'if' 'for' 'else' 'do' 'default'
             'continue' 'case' 'break' ';' '--' '-' '++' '(' '%number' '%ident'
             '!'

 **** LAST STATE IN CONFLICT :  180